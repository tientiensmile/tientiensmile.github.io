<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Tientien🙂</title>
    <link>https://tientiensmile.github.io/posts/</link>
    <description>Recent content in Posts on Tientien🙂</description>
    <image>
      <url>https://tientiensmile.github.io/images/avator.png</url>
      <link>https://tientiensmile.github.io/images/avator.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 27 Feb 2022 08:00:00 +0800</lastBuildDate><atom:link href="https://tientiensmile.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>20220227</title>
      <link>https://tientiensmile.github.io/posts/life/20220227/</link>
      <pubDate>Sun, 27 Feb 2022 08:00:00 +0800</pubDate>
      
      <guid>https://tientiensmile.github.io/posts/life/20220227/</guid>
      <description>Dear 嘉玲、凱宇老師：）
上次課前談話沒說出口的，想要謝謝你們！ 雖然是去年9月左右才認識啟點 但感覺你們的聲音已經陪伴我好一段時間 從敲門這個節目開始覺得很幸運能認識你們 上次問我是哪一集觸動到我 仔細回想，當時是從搜尋看到的 我的習慣像看影集一樣，不是別人推薦的不管有沒有連貫我都會從第一集開始 主要是被輕鬆有趣的談話吸引吧 小到開場偶爾的卡詞都讓我覺得特別真實 我當時的情緒狀態特別低落也特別封閉什麼聲音都聽不進進去 打開會追的影集就像在播背景音樂一樣， 人在但靈魂不知道漂到哪裡去了
身邊有想幫助我的人，但我就像一塊木頭沒有任何反應 一開始聽發現就那麼自然的讓我會心一笑了 漸漸的你們輸出的內容就一點點流進來 像旁敲側擊一樣 我也說不清楚是什麼準確的東西 感覺原本很僵固的那一塊開始悄悄地鬆動了
上次有提到真的讓我有感觸 開始思考我自己到底需要得到什麼幫助的是第12集 我之前的狀態大概就是知道自己需要幫助但說不清楚想要什麼 確實就是抱著去看醫生希望問題就能得到解決 也有一點賭氣不想好起來，可以說是耗著頂多讓我能勉強維持繼續工作不要放棄 那一集你們很真實的表達了你們所能做的，還有從你們角度看到的東西 我才意識到當時看診的醫師碰到我應該覺得很無力吧
後來開始聽裘我呀、有聲書評、一天聽一點到最近的心理小學堂 很喜歡聽你們用心製作分享的內容 謝謝你們(希望能夠幫我轉達這份感謝給怡璇、媗甯等所有用心付出製作這些內容的你們)
決定是否要走進實體課程我想了很久 像你們問我對這堂課有什麼期望 我一開始回答沒有其實是因為更清楚地知道你們扮演的角色 是陪伴每一個來到裡的學員，用你們的專業帶我們用不同角度抑或去看見各自心裡面埋在更深的東西 主要是需要願意把自己打開才有可能在這門課程有所收穫。
我可能有滿多議題要解決，不是這門課都能得到解答，也或許不是所有東西都需要答案 從上一次面談應該可以感覺到我不是一個有自信的人 我知道怎麼做一個乖女兒、好學生、好員工(別人期待的樣子) 但我不太會照顧到自己的需要 不會肯定自己、沒有辦法給自己力量、好好的跟自己相處。 所以這應該是我現階段最需要的 好好的把自己搞清楚才有餘力去照顧到其他關係。
選擇踏進來的我應該是準備好了 我知道會是一段痛苦的過程 我當下組織語言的能力比較弱，不知道怎麼回答就會卡住 你們可能會常常碰到我的沉默、或是一個含糊的回答 有時候是找不到精準描述的詞彙、或是沒有想過這種可能 給我選擇或是比較明確的例子，可能可以引導我表達出我當下更準確的想法 或是留給我一些時間思考，你們的建議或提問我都會很認真的在聽 如果沒有馬上的反饋通常表示我需要回去消化一下，對我來說用寫的應該可以表達得更清楚
期待你們持續推出的內容以及未來課程，謝謝你們！
天韻</description>
    </item>
    
    <item>
      <title>RxSwift - Combination Operators</title>
      <link>https://tientiensmile.github.io/posts/rxswift/rxswift_combination_operators/</link>
      <pubDate>Thu, 17 Feb 2022 20:35:00 +0800</pubDate>
      
      <guid>https://tientiensmile.github.io/posts/rxswift/rxswift_combination_operators/</guid>
      <description>Combination Operators  將多個 Observable 組合成單個 Observable 運算符。  startWith  開始從某個 Observable 發出元素之前發出指定的元素序列。   每個連續的 startWith 元素都將在前一個 startWith 元素之前添加。
 let disposeBag = DisposeBag() Observable.of(&amp;#34;A&amp;#34;, &amp;#34;B&amp;#34;, &amp;#34;C&amp;#34;, &amp;#34;D&amp;#34;) .startWith(&amp;#34;1&amp;#34;) .startWith(&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34;) .subscribe(onNext: { print($0) }) .disposed(by: disposeBag) 印出結果
a b c 1 A B C D merge zip combineLatest switchLatest withLatestFrom  </description>
    </item>
    
    <item>
      <title>RxSwift - take、distinctUntilChanged</title>
      <link>https://tientiensmile.github.io/posts/rxswift/rxswift_operators_2/</link>
      <pubDate>Mon, 14 Feb 2022 17:35:00 +0800</pubDate>
      
      <guid>https://tientiensmile.github.io/posts/rxswift/rxswift_operators_2/</guid>
      <description>take  從 Observable 中發出頭 n 個元素，忽略後面的元素直到序列結束。   let disposeBag = DisposeBag() Observable.of(&amp;#34;🐱&amp;#34;, &amp;#34;🐰&amp;#34;, &amp;#34;🐶&amp;#34;, &amp;#34;🐸&amp;#34;, &amp;#34;🐷&amp;#34;, &amp;#34;🐵&amp;#34;) .take(3) .subscribe(onNext: { print($0) }) .disposed(by: disposeBag) 印出結果
🐱 🐰 🐶 distinctUntilChanged  阻止 Observable 發出相同的元素。如果後一個元素和前一個元素相同，將不會發出來，若後一個元素和前一個元素不同才會被發出來。   let disposeBag = DisposeBag() Observable.of(&amp;quot;🐱&amp;quot;, &amp;quot;🐷&amp;quot;, &amp;quot;🐱&amp;quot;, &amp;quot;🐱&amp;quot;, &amp;quot;🐱&amp;quot;, &amp;quot;🐵&amp;quot;, &amp;quot;🐱&amp;quot;) .distinctUntilChanged() .subscribe(onNext: { print($0) }) .disposed(by: disposeBag) 印出結果
🐱 🐷 🐱 🐵 🐱 </description>
    </item>
    
    <item>
      <title>RxSwift - combineLatest、skip、do</title>
      <link>https://tientiensmile.github.io/posts/rxswift/rxswift_operators_1/</link>
      <pubDate>Sun, 13 Feb 2022 17:35:00 +0800</pubDate>
      
      <guid>https://tientiensmile.github.io/posts/rxswift/rxswift_operators_1/</guid>
      <description>combineLatest  將多個 Observables 中最新的元素透過一個函數組合起來，然後將結果發出來。  let disposeBag = DisposeBag() let first = PublishSubject&amp;lt;String&amp;gt;() let second = PublishSubject&amp;lt;String&amp;gt;() Observable.combineLatest(first, second) { $0 + $1 } .dubscribe(onNext: { print($0) }) .disposed(by: disposeBag) first.onNext(&amp;#34;1&amp;#34;) second.onNext(&amp;#34;A&amp;#34;) first.onNext(&amp;#34;2&amp;#34;) second.onNext(&amp;#34;B&amp;#34;) second.onNext(&amp;#34;C&amp;#34;) second.onNext(&amp;#34;D&amp;#34;) first.onNext(&amp;#34;3&amp;#34;) first.onNext(&amp;#34;4&amp;#34;) 印出結果
1A 2A 2B 2C 2D 3D 4D skip  跳過 Observable 中頭 n 個元素  do  使用 do 來監聽事件的生命週期，它會在每一次事件發送前被調用。 它和 subscribe 一樣，可以通過不同的閉包回調不同類型的事件。 如：do(onNext: ) 在 subscribe(onNext:) 前，do(onCompleted:) 在 subscribe(onCompleted:) 前調用。  let observable = Observable.</description>
    </item>
    
    <item>
      <title>SwiftUI - ObservableObject</title>
      <link>https://tientiensmile.github.io/posts/swiftui/swiftui_observableobject/</link>
      <pubDate>Sun, 06 Feb 2022 18:00:00 +0800</pubDate>
      
      <guid>https://tientiensmile.github.io/posts/swiftui/swiftui_observableobject/</guid>
      <description>ObservableObject 和 @ObservedObject  ObservableObject 是一個 protocol，要求實現協議的類型為 class，有一個需要實作的屬性 objectWillChange。 當數據將要發生改變時，這個屬性用來向外進行「廣播」，它的訂閱者(一般是 View 相關的邏輯)在收到通知後，對 View 進行刷新。 創建遵從 ObservableObject 協議的類別後，實際在 View 裡使用需要將此物件宣告為 @ObservedObject。  範例：點擊按鈕擲骰子  使用 PassthroughSubject 中 send() 方法通知事件將要發生。 PassthroughSubject 於 Combine 框架中，將於後續介紹。
  ContentView 中 model 為 reference type，使用 @ObservedObject 將它和 ContentView 關聯起來。當 model 中的屬性 diceState 將要改變，objectWillChange 就會發出事件，使得 body 被調用進行UI刷新。  struct ContentView: View { @ObservedObject private var model = DiceModel() var body: some View { CounterButton(diceState: $model.diceState) } } class DiceModel: ObservableObject { let objectWillChange = PassthroughSubject&amp;lt;Void, Never&amp;gt;() var diceState: DiceState = .</description>
    </item>
    
    <item>
      <title>SwiftUI - 狀態(State)與綁定(Binding)</title>
      <link>https://tientiensmile.github.io/posts/swiftui/swiftui_stateandbinding/</link>
      <pubDate>Sun, 06 Feb 2022 14:15:00 +0800</pubDate>
      
      <guid>https://tientiensmile.github.io/posts/swiftui/swiftui_stateandbinding/</guid>
      <description>屬性包裝、投射屬性  由 @ 修飾的屬性稱為屬性包裝(Property Wrapper)。 @State、@Binding、@ObjectBinding、@EnvironmentObject都是 @propertyWrapper 修飾的 struct。 對一個由 @ 修飾的屬性，在它前面使用 $ 取得的值，被稱為投射屬性(Projection Property)。 並不是所有的 @ 屬性都提供 $ 的投射訪問方式。  @State  @State 修飾的屬性會被自動轉換為一對 setter 和 getter 對這個屬性進行賦值的操作，它的 body 會被再次調用，進行 View 的刷新。 但由於是 value type ，在不同物件傳遞時透過複製值，因此經過不同層級底層改變並無法更新頂層的值。 訪問 @State 修飾的屬性，所有調用觸發的都是 wrappedValue。 使用 $ 訪問屬性，取得的是 projectedValue ，為一個 Binding 類型的值。  SwiftUI 中 State 定義的關鍵部分
@propertyWrapper public struct State&amp;lt;Value&amp;gt;: DynamicViewProperty, BindingConvertible { public var value: Value { get nonmutating set } public var wrappedValue: Value { get nonmutating set } public var projectedValue: Binding&amp;lt;Value&amp;gt; { get } init(initialValue value: Value) } 範例：點擊按鈕數字累加點擊次數 struct ContentView: View { @State private var count: Int = 0 var body: some View { Button { self.</description>
    </item>
    
    <item>
      <title>Redux架構</title>
      <link>https://tientiensmile.github.io/posts/redux_intro/</link>
      <pubDate>Sun, 06 Feb 2022 09:20:00 +0800</pubDate>
      
      <guid>https://tientiensmile.github.io/posts/redux_intro/</guid>
      <description> 適合 SwiftUI 的架構
 Redux 基本概念  App 為一個狀態機，狀態決定用戶介面。 這些狀態(State)都保存在一個 Store 物件中。 View 不能直接操作 State，只能通過發送 Action 的方式間接改變儲存在 Store 中的 State 。 Reducer 接受原有的 State 和發送過來的 Action，生成新的 State。 用新的 State 替換 Store 中原有的狀態，並用新的狀態來驅動更新介面。  Store 應用程式只有一個 Store，用來保存整個應用程式的 State。 可以透過 store.getState() 取得應用程式當前狀態，但不能直接修改。
Action Action 為一個普通的物件，用來描述應用程式發生的事情，把數據傳遞給 Store 的唯一途徑。
Reducer Reducer.reduce(state: action:)是純函數，具體處理狀態的邏輯。
 純函數：返回值只由調用時的參數決定，不依賴於任何系統狀態，也不改變其作用域之外的變量狀態的函數。
 struct Reducer { static func reduce(state: State, action: Action) -&amp;gt; State { return state.apply(item: action) } } </description>
    </item>
    
    <item>
      <title>RxSwift - Subjects</title>
      <link>https://tientiensmile.github.io/posts/rxswift/rxswift_subjects/</link>
      <pubDate>Sat, 05 Feb 2022 12:15:00 +0800</pubDate>
      
      <guid>https://tientiensmile.github.io/posts/rxswift/rxswift_subjects/</guid>
      <description>Subjects 同時是 Observable 也是 Observer
Publish Subject 訂閱之後才會收到發出的事件。
let subject = PublishSubject&amp;lt;String&amp;gt;() /// Issue 1 在訂閱之前收不到 subject.onNext(&amp;#34;Issue 1&amp;#34;) subject.subscribe { event in print(event) } subject.onNext(&amp;#34;Issue 2&amp;#34;) subject.dispose() /// Issue 3 在dispose之後收不到 subject.onNext(&amp;#34;Issue 3&amp;#34;) /// 印出結果 next(Issue 2) let subject = PublishSubject&amp;lt;String&amp;gt;() /// Issue 1 在訂閱之前收不到 subject.onNext(&amp;#34;Issue 1&amp;#34;) subject.subscribe { event in print(event) } subject.onNext(&amp;#34;Issue 2&amp;#34;) subject.onCompleted() /// Issue 3 在completed之後收不到 subject.onNext(&amp;#34;Issue 3&amp;#34;) /// 印出結果 next(Issue 2) completed Behavior Subject 需給定初始值，因爲訂閱它時，會得到初始值或訂閱前最後一個值。</description>
    </item>
    
    <item>
      <title>RxSwift - Observable 可監聽序列</title>
      <link>https://tientiensmile.github.io/posts/rxswift/rxswift_observable/</link>
      <pubDate>Sat, 05 Feb 2022 10:15:00 +0800</pubDate>
      
      <guid>https://tientiensmile.github.io/posts/rxswift/rxswift_observable/</guid>
      <description>每一個 Observable 就只是一個序列(Sequence)而已。
subscribe 一個 observable，以訂閱UISlider為例，當滑動UISlider時值改變就會通知訂閱(subscride)的人。
建立Observables 建立一個只有一個 element，值為1的observable
let observable = Observable.just(1) 建立一個三個element，型別為int的observable
let observable2 = Observable.of(1,2,3) 建立一個只有一個element，為int陣列的observable
let observable3 = Observable.of([1,2,3]) 用from遍歷陣列中每一個element，相當於observable2
let observable4 = Observable.from([1,2,3]) 建立Subscriptions observable4.subscribe { event in print(event) } /// 印出結果 next(1) next(2) next(3) completed /// 取得Observable中的值 observable4.subscribe { event in if let element = event.element { print(element) } } /// 較簡易取得element的方法 observable4.subscribe(onNext: { element in print(element) }) /// 印出結果 1 2 3 observable3.subscribe { event in print(event) } /// 印出結果 next([1, 2, 3]) completed 取得Observable中的值</description>
    </item>
    
    <item>
      <title>RxSwift - Observer 觀察者</title>
      <link>https://tientiensmile.github.io/posts/rxswift/rxswift_observer/</link>
      <pubDate>Sat, 05 Feb 2022 10:15:00 +0800</pubDate>
      
      <guid>https://tientiensmile.github.io/posts/rxswift/rxswift_observer/</guid>
      <description>觀察者是用來監聽序列，當收到事件作出響應。
建立觀察者 對一個 Observable 進行 subscribe。事件發生時於後面的 onNext、onError、onCompleted作出響應。
tap.subscribe(onNext: { [weak self] in self?.showAlert() }, onError: { error in print(&amp;#34;發生錯誤： \(error.localizedDescription)&amp;#34;) }, onCompleted: { print(&amp;#34;完成任務&amp;#34;) }) AnyObserver AnyObserver 可以用來描述任意一種觀察者。
範例：印出網路請求結果
URLSession.shared.rx.data(request: URLRequest(url: url)) .subscribe(onNext: { data in print(&amp;#34;Data Task Success with count: \(data.count)&amp;#34;) }, onError: { error in print(&amp;#34;Data Task Error: \(error)&amp;#34;) }) .disposed(by: disposeBag) 可以改寫為
let observer: AnyObserver&amp;lt;Data&amp;gt; = AnyObserver { (event) in switch event { case .next(let data): print(&amp;#34;Data Task Success with count: \(data.</description>
    </item>
    
  </channel>
</rss>
