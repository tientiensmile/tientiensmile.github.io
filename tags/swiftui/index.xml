<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>swiftUI on Tientien🙂</title>
    <link>https://tientiensmile.github.io/tags/swiftui/</link>
    <description>Recent content in swiftUI on Tientien🙂</description>
    <image>
      <url>https://tientiensmile.github.io/images/avator.png</url>
      <link>https://tientiensmile.github.io/images/avator.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 06 Feb 2022 14:15:00 +0800</lastBuildDate><atom:link href="https://tientiensmile.github.io/tags/swiftui/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SwiftUI - 狀態(State)與綁定(Binding)</title>
      <link>https://tientiensmile.github.io/posts/swiftui_stateandbinding/</link>
      <pubDate>Sun, 06 Feb 2022 14:15:00 +0800</pubDate>
      
      <guid>https://tientiensmile.github.io/posts/swiftui_stateandbinding/</guid>
      <description>屬性包裝、投射屬性  由 @ 修飾的屬性稱為屬性包裝(Property Wrapper)。 @State、@Binding、@ObjectBinding、@EnvironmentObject都是 @propertyWrapper 修飾的 struct。 對一個由 @ 修飾的屬性，在它前面使用 $ 取得的值，被稱為投射屬性(Projection Property)。 並不是所有的 @ 屬性都提供 $ 的投射訪問方式。  @State  @State 修飾的屬性會被自動轉換為一對 setter 和 getter 對這個屬性進行賦值的操作，它的 body 會被再次調用，進行 View 的刷新。 但由於是 value type ，在不同物件傳遞時透過複製值，因此經過不同層級底層改變並無法更新頂層的值。 訪問 @State 修飾的屬性，所有調用觸發的都是 wrappedValue。 使用 $ 訪問屬性，取得的是 projectedValue ，為一個 Binding 類型的值。  SwiftUI 中 State 定義的關鍵部分
@propertyWrapper public struct State&amp;lt;Value&amp;gt;: DynamicViewProperty, BindingConvertible { public var value: Value { get nonmutating set } public var wrappedValue: Value { get nonmutating set } public var projectedValue: Binding&amp;lt;Value&amp;gt; { get } init(initialValue value: Value) } 範例：點擊按鈕數字累加點擊次數 struct ContentView: View { @State private var count: Int = 0 var body: some View { Button { self.</description>
    </item>
    
    <item>
      <title>Redux架構</title>
      <link>https://tientiensmile.github.io/posts/redux_intro/</link>
      <pubDate>Sun, 06 Feb 2022 09:20:00 +0800</pubDate>
      
      <guid>https://tientiensmile.github.io/posts/redux_intro/</guid>
      <description> 適合 SwiftUI 的架構
 Redux 基本概念  App 為一個狀態機，狀態決定用戶介面。 這些狀態(State)都保存在一個 Store 物件中。 View 不能直接操作 State，只能通過發送 Action 的方式間接改變儲存在 Store 中的 State 。 Reducer 接受原有的 State 和發送過來的 Action，生成新的 State。 用新的 State 替換 Store 中原有的狀態，並用新的狀態來驅動更新介面。  Store 應用程式只有一個 Store，用來保存整個應用程式的 State。 可以透過 store.getState() 取得應用程式當前狀態，但不能直接修改。
Action Action 為一個普通的物件，用來描述應用程式發生的事情，把數據傳遞給 Store 的唯一途徑。
Reducer Reducer.reduce(state: action:)是純函數，具體處理狀態的邏輯。
 純函數：返回值只由調用時的參數決定，不依賴於任何系統狀態，也不改變其作用域之外的變量狀態的函數。
 struct Reducer { static func reduce(state: State, action: Action) -&amp;gt; State { return state.apply(item: action) } } </description>
    </item>
    
  </channel>
</rss>
