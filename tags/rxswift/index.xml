<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>rxSwift on Tientien🙂</title>
    <link>https://tientiensmile.github.io/tags/rxswift/</link>
    <description>Recent content in rxSwift on Tientien🙂</description>
    <image>
      <url>https://tientiensmile.github.io/images/avator.png</url>
      <link>https://tientiensmile.github.io/images/avator.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 17 Feb 2022 20:35:00 +0800</lastBuildDate><atom:link href="https://tientiensmile.github.io/tags/rxswift/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>RxSwift - Combination Operators</title>
      <link>https://tientiensmile.github.io/posts/rxswift/rxswift_combination_operators/</link>
      <pubDate>Thu, 17 Feb 2022 20:35:00 +0800</pubDate>
      
      <guid>https://tientiensmile.github.io/posts/rxswift/rxswift_combination_operators/</guid>
      <description>Combination Operators  將多個 Observable 組合成單個 Observable 運算符。  startWith  開始從某個 Observable 發出元素之前發出指定的元素序列。   每個連續的 startWith 元素都將在前一個 startWith 元素之前添加。
 let disposeBag = DisposeBag() Observable.of(&amp;#34;A&amp;#34;, &amp;#34;B&amp;#34;, &amp;#34;C&amp;#34;, &amp;#34;D&amp;#34;) .startWith(&amp;#34;1&amp;#34;) .startWith(&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34;) .subscribe(onNext: { print($0) }) .disposed(by: disposeBag) 印出結果
a b c 1 A B C D merge zip combineLatest switchLatest withLatestFrom  </description>
    </item>
    
    <item>
      <title>RxSwift - take、distinctUntilChanged</title>
      <link>https://tientiensmile.github.io/posts/rxswift/rxswift_operators_2/</link>
      <pubDate>Mon, 14 Feb 2022 17:35:00 +0800</pubDate>
      
      <guid>https://tientiensmile.github.io/posts/rxswift/rxswift_operators_2/</guid>
      <description>take  從 Observable 中發出頭 n 個元素，忽略後面的元素直到序列結束。   let disposeBag = DisposeBag() Observable.of(&amp;#34;🐱&amp;#34;, &amp;#34;🐰&amp;#34;, &amp;#34;🐶&amp;#34;, &amp;#34;🐸&amp;#34;, &amp;#34;🐷&amp;#34;, &amp;#34;🐵&amp;#34;) .take(3) .subscribe(onNext: { print($0) }) .disposed(by: disposeBag) 印出結果
🐱 🐰 🐶 distinctUntilChanged  阻止 Observable 發出相同的元素。如果後一個元素和前一個元素相同，將不會發出來，若後一個元素和前一個元素不同才會被發出來。   let disposeBag = DisposeBag() Observable.of(&amp;quot;🐱&amp;quot;, &amp;quot;🐷&amp;quot;, &amp;quot;🐱&amp;quot;, &amp;quot;🐱&amp;quot;, &amp;quot;🐱&amp;quot;, &amp;quot;🐵&amp;quot;, &amp;quot;🐱&amp;quot;) .distinctUntilChanged() .subscribe(onNext: { print($0) }) .disposed(by: disposeBag) 印出結果
🐱 🐷 🐱 🐵 🐱 </description>
    </item>
    
    <item>
      <title>RxSwift - combineLatest、skip、do</title>
      <link>https://tientiensmile.github.io/posts/rxswift/rxswift_operators_1/</link>
      <pubDate>Sun, 13 Feb 2022 17:35:00 +0800</pubDate>
      
      <guid>https://tientiensmile.github.io/posts/rxswift/rxswift_operators_1/</guid>
      <description>combineLatest  將多個 Observables 中最新的元素透過一個函數組合起來，然後將結果發出來。  let disposeBag = DisposeBag() let first = PublishSubject&amp;lt;String&amp;gt;() let second = PublishSubject&amp;lt;String&amp;gt;() Observable.combineLatest(first, second) { $0 + $1 } .dubscribe(onNext: { print($0) }) .disposed(by: disposeBag) first.onNext(&amp;#34;1&amp;#34;) second.onNext(&amp;#34;A&amp;#34;) first.onNext(&amp;#34;2&amp;#34;) second.onNext(&amp;#34;B&amp;#34;) second.onNext(&amp;#34;C&amp;#34;) second.onNext(&amp;#34;D&amp;#34;) first.onNext(&amp;#34;3&amp;#34;) first.onNext(&amp;#34;4&amp;#34;) 印出結果
1A 2A 2B 2C 2D 3D 4D skip  跳過 Observable 中頭 n 個元素  do  使用 do 來監聽事件的生命週期，它會在每一次事件發送前被調用。 它和 subscribe 一樣，可以通過不同的閉包回調不同類型的事件。 如：do(onNext: ) 在 subscribe(onNext:) 前，do(onCompleted:) 在 subscribe(onCompleted:) 前調用。  let observable = Observable.</description>
    </item>
    
    <item>
      <title>RxSwift - Subjects</title>
      <link>https://tientiensmile.github.io/posts/rxswift/rxswift_subjects/</link>
      <pubDate>Sat, 05 Feb 2022 12:15:00 +0800</pubDate>
      
      <guid>https://tientiensmile.github.io/posts/rxswift/rxswift_subjects/</guid>
      <description>Subjects 同時是 Observable 也是 Observer
Publish Subject 訂閱之後才會收到發出的事件。
let subject = PublishSubject&amp;lt;String&amp;gt;() /// Issue 1 在訂閱之前收不到 subject.onNext(&amp;#34;Issue 1&amp;#34;) subject.subscribe { event in print(event) } subject.onNext(&amp;#34;Issue 2&amp;#34;) subject.dispose() /// Issue 3 在dispose之後收不到 subject.onNext(&amp;#34;Issue 3&amp;#34;) /// 印出結果 next(Issue 2) let subject = PublishSubject&amp;lt;String&amp;gt;() /// Issue 1 在訂閱之前收不到 subject.onNext(&amp;#34;Issue 1&amp;#34;) subject.subscribe { event in print(event) } subject.onNext(&amp;#34;Issue 2&amp;#34;) subject.onCompleted() /// Issue 3 在completed之後收不到 subject.onNext(&amp;#34;Issue 3&amp;#34;) /// 印出結果 next(Issue 2) completed Behavior Subject 需給定初始值，因爲訂閱它時，會得到初始值或訂閱前最後一個值。</description>
    </item>
    
    <item>
      <title>RxSwift - Observable 可監聽序列</title>
      <link>https://tientiensmile.github.io/posts/rxswift/rxswift_observable/</link>
      <pubDate>Sat, 05 Feb 2022 10:15:00 +0800</pubDate>
      
      <guid>https://tientiensmile.github.io/posts/rxswift/rxswift_observable/</guid>
      <description>每一個 Observable 就只是一個序列(Sequence)而已。
subscribe 一個 observable，以訂閱UISlider為例，當滑動UISlider時值改變就會通知訂閱(subscride)的人。
建立Observables 建立一個只有一個 element，值為1的observable
let observable = Observable.just(1) 建立一個三個element，型別為int的observable
let observable2 = Observable.of(1,2,3) 建立一個只有一個element，為int陣列的observable
let observable3 = Observable.of([1,2,3]) 用from遍歷陣列中每一個element，相當於observable2
let observable4 = Observable.from([1,2,3]) 建立Subscriptions observable4.subscribe { event in print(event) } /// 印出結果 next(1) next(2) next(3) completed /// 取得Observable中的值 observable4.subscribe { event in if let element = event.element { print(element) } } /// 較簡易取得element的方法 observable4.subscribe(onNext: { element in print(element) }) /// 印出結果 1 2 3 observable3.subscribe { event in print(event) } /// 印出結果 next([1, 2, 3]) completed 取得Observable中的值</description>
    </item>
    
    <item>
      <title>RxSwift - Observer 觀察者</title>
      <link>https://tientiensmile.github.io/posts/rxswift/rxswift_observer/</link>
      <pubDate>Sat, 05 Feb 2022 10:15:00 +0800</pubDate>
      
      <guid>https://tientiensmile.github.io/posts/rxswift/rxswift_observer/</guid>
      <description>觀察者是用來監聽序列，當收到事件作出響應。
建立觀察者 對一個 Observable 進行 subscribe。事件發生時於後面的 onNext、onError、onCompleted作出響應。
tap.subscribe(onNext: { [weak self] in self?.showAlert() }, onError: { error in print(&amp;#34;發生錯誤： \(error.localizedDescription)&amp;#34;) }, onCompleted: { print(&amp;#34;完成任務&amp;#34;) }) AnyObserver AnyObserver 可以用來描述任意一種觀察者。
範例：印出網路請求結果
URLSession.shared.rx.data(request: URLRequest(url: url)) .subscribe(onNext: { data in print(&amp;#34;Data Task Success with count: \(data.count)&amp;#34;) }, onError: { error in print(&amp;#34;Data Task Error: \(error)&amp;#34;) }) .disposed(by: disposeBag) 可以改寫為
let observer: AnyObserver&amp;lt;Data&amp;gt; = AnyObserver { (event) in switch event { case .next(let data): print(&amp;#34;Data Task Success with count: \(data.</description>
    </item>
    
  </channel>
</rss>
