<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>SwiftUI on Tientien🙂</title>
    <link>https://tientiensmile.github.io/categories/swiftui/</link>
    <description>Recent content in SwiftUI on Tientien🙂</description>
    <image>
      <url>https://tientiensmile.github.io/images/avator.png</url>
      <link>https://tientiensmile.github.io/images/avator.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 17 Jul 2022 08:00:00 +0800</lastBuildDate><atom:link href="https://tientiensmile.github.io/categories/swiftui/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SwiftUI - 包裝UIView</title>
      <link>https://tientiensmile.github.io/posts/swiftui/swiftui_uiviewrepresentable/</link>
      <pubDate>Sun, 17 Jul 2022 08:00:00 +0800</pubDate>
      
      <guid>https://tientiensmile.github.io/posts/swiftui/swiftui_uiviewrepresentable/</guid>
      <description>UIViewRepresentable  SwiftUI 尚未能實現，將 UIKit 中已有的部分進行封裝，提供給 SwiftUI 使用 UIViewRepresentable 協議提供了在 SwiftUI 中封裝 UIView 的功能 此協議需要實作2個方法  protocol UIViewRepresentable: View { associatedtype UIViewType: UIView func makeUIView(context: Self.Context) -&amp;gt; Self.UIViewType func updateUIView(_ uiview: Self.UIViewType, context: Self.Context) }  makeUIView(context:) 需要返回想要封裝的 UIView 類型，SwiftUI 在創建一個被封裝的 UIView 時會調用此方法 updateUIView(_:, context:) 則在 UIViewRepresentable 中的某個屬性發生變化，SwiftUI 要求更新該 UIKit 部件時被調用  例：在SwiftUI使用UIKit的UIVisualEffectView import SwiftUI import UIKit struct BlurView: UIViewRepresentable { let style: UIBlurEffect.Style func makeUIView(context: UIViewRepresentableContext&amp;lt;BlurView&amp;gt;) -&amp;gt; UIView { let view = UIView(frame: .</description>
    </item>
    
    <item>
      <title>SwiftUI - ObservableObject</title>
      <link>https://tientiensmile.github.io/posts/swiftui/swiftui_observableobject/</link>
      <pubDate>Sun, 06 Feb 2022 18:00:00 +0800</pubDate>
      
      <guid>https://tientiensmile.github.io/posts/swiftui/swiftui_observableobject/</guid>
      <description>ObservableObject 和 @ObservedObject  ObservableObject 是一個 protocol，要求實現協議的類型為 class，有一個需要實作的屬性 objectWillChange。 當數據將要發生改變時，這個屬性用來向外進行「廣播」，它的訂閱者(一般是 View 相關的邏輯)在收到通知後，對 View 進行刷新。 創建遵從 ObservableObject 協議的類別後，實際在 View 裡使用需要將此物件宣告為 @ObservedObject。  範例：點擊按鈕擲骰子  使用 PassthroughSubject 中 send() 方法通知事件將要發生。 PassthroughSubject 於 Combine 框架中，將於後續介紹。
  ContentView 中 model 為 reference type，使用 @ObservedObject 將它和 ContentView 關聯起來。當 model 中的屬性 diceState 將要改變，objectWillChange 就會發出事件，使得 body 被調用進行UI刷新。  struct ContentView: View { @ObservedObject private var model = DiceModel() var body: some View { CounterButton(diceState: $model.diceState) } } class DiceModel: ObservableObject { let objectWillChange = PassthroughSubject&amp;lt;Void, Never&amp;gt;() var diceState: DiceState = .</description>
    </item>
    
    <item>
      <title>SwiftUI - 狀態(State)與綁定(Binding)</title>
      <link>https://tientiensmile.github.io/posts/swiftui/swiftui_stateandbinding/</link>
      <pubDate>Sun, 06 Feb 2022 14:15:00 +0800</pubDate>
      
      <guid>https://tientiensmile.github.io/posts/swiftui/swiftui_stateandbinding/</guid>
      <description>屬性包裝、投射屬性  由 @ 修飾的屬性稱為屬性包裝(Property Wrapper)。 @State、@Binding、@ObjectBinding、@EnvironmentObject都是 @propertyWrapper 修飾的 struct。 對一個由 @ 修飾的屬性，在它前面使用 $ 取得的值，被稱為投射屬性(Projection Property)。 並不是所有的 @ 屬性都提供 $ 的投射訪問方式。  @State  @State 修飾的屬性會被自動轉換為一對 setter 和 getter 對這個屬性進行賦值的操作，它的 body 會被再次調用，進行 View 的刷新。 但由於是 value type ，在不同物件傳遞時透過複製值，因此經過不同層級底層改變並無法更新頂層的值。 訪問 @State 修飾的屬性，所有調用觸發的都是 wrappedValue。 使用 $ 訪問屬性，取得的是 projectedValue ，為一個 Binding 類型的值。  SwiftUI 中 State 定義的關鍵部分
@propertyWrapper public struct State&amp;lt;Value&amp;gt;: DynamicViewProperty, BindingConvertible { public var value: Value { get nonmutating set } public var wrappedValue: Value { get nonmutating set } public var projectedValue: Binding&amp;lt;Value&amp;gt; { get } init(initialValue value: Value) } 範例：點擊按鈕數字累加點擊次數 struct ContentView: View { @State private var count: Int = 0 var body: some View { Button { self.</description>
    </item>
    
  </channel>
</rss>
